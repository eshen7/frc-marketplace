services:
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT_HOST}:${POSTGRES_PORT_CONTAINER}" # expose psql ports
    volumes:
      - pgdata:/var/lib/postgresql/data # for persistent data
    restart: always
    networks:
      - backend_network

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER} # admin login
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD} # admin password
    ports:
      - "${PGADMIN_PORT_HOST}:${PGADMIN_PORT_CONTAINER}"
    volumes:
      - pgadmin_data:/var/lib/pgadmin # for persistent pgadmin configs
    restart: always
    networks:
      - backend_network

  backend_app:
    build: frc_marketplace_API
    container_name: django_app
    command: >
      sh -c "pipenv run daphne -b 0.0.0.0 -p ${DJANGO_PORT_HOST} frc_marketplace_API.asgi:application"
    ports:
      - "${DJANGO_PORT_HOST}:${DJANGO_PORT_CONTAINER}" # expose django ports
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT_CONTAINER}/${POSTGRES_DB}
      - DJANGO_SETTINGS_MODULE=frc_marketplace_API.settings # points to settings module
    depends_on:
      - db # waits for database to be ready
      - redis
    volumes:
      - django_migrations:/usr/local/app/api/migrations # for persistent migrations
      - staticfiles_volume:/usr/local/app/static
    restart: always
    networks:
      - backend_network

  frontend_app:
    build:
      context: ./vite-frontend
      dockerfile: Dockerfile
    container_name: vite_frontend
    networks:
      - frontend_network
    volumes:
      - ./vite-frontend/dist:/usr/share/nginx/html
    command: []
    env_file:
      - .env
    restart: on-failure

  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "${REDIS_PORT_HOST}:${REDIS_PORT_CONTAINER}"
    volumes:
      - redis-data:/data # Persist Redis data
    command: [ "redis-server" ]
    env_file:
      - .env
    restart: always # Restart automatically if the container stops
    networks:
      - backend_network

  celery:
    build: frc_marketplace_API
    container_name: celery_worker
    command: >
      sh -c "pipenv run celery -A frc_marketplace_API worker --loglevel=info"
    depends_on:
      - backend_app
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=frc_marketplace_API.settings
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT_CONTAINER}/0
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
    restart: always
    networks:
      - backend_network

  celery_beat:
    build: frc_marketplace_API
    container_name: celery_beat
    command: >
      sh -c "pipenv run celery -A frc_marketplace_API beat --loglevel=info"
    depends_on:
      - backend_app
      - redis
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=frc_marketplace_API.settings
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT_CONTAINER}/0
    restart: always
    networks:
      - backend_network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - staticfiles_volume:/usr/local/app/static
      - ./vite-frontend/dist:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
    depends_on:
      - backend_app
      - frontend_app
    restart: always
    networks:
      - frontend_network
      - backend_network

volumes:
  pgdata:
  pgadmin_data:
  redis-data:
  django_migrations:
  staticfiles_volume:


networks:
  backend_network:
  frontend_network:
